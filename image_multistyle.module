<?php
// $Id$

/**
 * @file
 * Implement an image image field formatter that outputs links to additional imagecache variations.
 */

/**
 * Implements hook_theme().
 */
function image_multistyle_theme() {
  return array(
    'image_multistyle_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL, 'image_extra_links' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function image_multistyle_field_formatter_info() {
  $formatters = array(
    'image_multistyle' => array(
      'label' => t('Image Multistyle'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => '', 'image_extra_links' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function image_multistyle_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  $element['image_extra_links'] = array(
    '#title' => t('Show additional links to...'),
    '#type' => 'checkboxes',
    '#default_value' => $settings['image_extra_links'],
    '#empty_option' => t('Nothing'),
    '#options' => image_style_options(FALSE),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_multistyle_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }
  
  $styles = image_style_options(FALSE);
  $links = array();
  foreach($styles as $key => $value) {
    if (!empty($settings['image_extra_links'][$key])) {
      $links[] = $styles[$key];
    }
  }
  if (!empty($links)) {
    $summary[] = t('Link to @styles', array('@styles' => implode(', ', $links)));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function image_multistyle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'image_multistyle_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
    
    if (!empty($display['settings']['image_extra_links'])) {
      $element[$delta]['#image_extra_links'] = $display['settings']['image_extra_links'];
    }
  }

  return $element;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_image_multistyle_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  if ($variables['image_extra_links']) {
    $links = array();
    $styles = $variables['image_extra_links'];
    foreach($styles as $style => $value) {
      if (!empty($value)) {
        $links[] = array(
          'title' => $style,
          'href' => image_style_url($style, $item['uri']),
          'options' => array('attributes' => array('class' => 'preset preset-'. $style)),
        );
      }
    }
    if (!empty($links)) {
      $variables = array(
        'links' => $links,
        'class' => 'image-multistyle-links',
      );
      $output .= theme('links', $variables);
    }
  }

  return $output;
}
